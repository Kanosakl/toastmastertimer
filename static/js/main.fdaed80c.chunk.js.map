{"version":3,"sources":["toastmasterTimer.js","timerSetting.js","settingPage.js","App.js","serviceWorker.js","index.js"],"names":["nosleep","ToastmasterTimer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","start","isRunning","colorBox","startTime","endTime","greenTime","redTime","onStartTimer","bind","assertThisInitialized","onStopTimer","onResetTimer","noSleepEnable","noSleepDisable","greenAlert","yellowAlert","redAlert","vibrateTime","_this2","setState","Date","now","timerTick","setInterval","setTimeout","vibrate","setColor","yellowTime","alertLoop","_this3","intervalVibrate","clearInterval","clearTimeout","duration","navigator","console","log","concat","color","disable","NoSleep","enable","startTimeEndTimeFormat","timeFormat","style","height","backgroundColor","display","buttonStyle","width","bottom","position","react_default","a","createElement","Button","onClick","stop","reset","startTimeEndTime","underTime","millisec","format","overTime","className","id","flex","fontSize","React","Component","TimerSetting","timeName","timeGreenId","timeYellowId","timeRedId","timeVibrateId","nameText","timerConfiguration","name","canEditName","onRunClicked","onDeleteClicked","onTimePickerChanged","onNameEditClicked","onNameSaveClicked","onNameChanged","onInitialRun","_this$props$timerConf","green","yellow","red","prevProps","handleSelect","handleDelete","e","split","parseInt","convertTimeToMs","moment","error","timePickerElement","timePickerId","newTime","value","newTimeConfig","TimeConfig","onTimerConfigurationChanged","ms","minutes","Math","floor","seconds","toFixed","input","document","getElementById","focus","select","nameTextBox","newTimeName","target","Form","Row","Group","as","Col","InputGroup","size","FormControl","aria-label","aria-describedby","type","readOnly","onChange","Append","variant","querySelector","controlId","Label","es","onClose","showTime","showHour","secondStep","msToMinutesAndSeconds","hidden","showMinute","SettingPage","timerPanels","onTimerRunClicked","onTimerPanelDelete","onAddNewTimerPanelClicked","onTimerConfigSave","localStorage","getItem","panelsState","JSON","parse","length","event","index","newTimerConfiguration","newTimerPanels","toArray","slice","_this$state$timerPane","onRunClick","timerState","filter","element","i","setItem","stringify","dataStr","dataUri","encodeURIComponent","linkElement","setAttribute","click","files","reader","FileReader","readAsText","onload","json","result","exportToJsonFile","react_file_reader_default","handleFiles","importToJsonFile","fileTypes","map","timerConfig","timerSetting","assign","key","App","_React$Component","activeTab","handleTimerSelect","inherits","createClass","Tabs","activeKey","defaultActiveKey","onSelect","eventKey","Tab","title","settingPage_SettingPage","toastmasterTimer","Boolean","window","location","hostname","match","ReactDOM","render","App_App","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdaed80c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport millisec from 'millisec';\r\nimport { timeFormat } from \"d3-time-format\";\r\nimport NoSleep from 'nosleep.js';\r\n\r\n// nosleep is coded this way because of an issue in IOS https://github.com/richtr/NoSleep.js/issues/75\r\nlet nosleep = null;\r\n\r\nclass ToastmasterTimer extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            //all time is milliseconds format\r\n            time: 0,\r\n            start: 0,\r\n            isRunning: false,\r\n            colorBox: null,\r\n            startTime: null,\r\n            endTime: null,\r\n            greenTime: null,\r\n            redTime: null,\r\n        }\r\n        this.onStartTimer = this.onStartTimer.bind(this)\r\n        this.onStopTimer = this.onStopTimer.bind(this)\r\n        this.onResetTimer = this.onResetTimer.bind(this)\r\n        this.noSleepEnable = this.noSleepEnable.bind(this)\r\n        this.noSleepDisable = this.noSleepDisable.bind(this)\r\n\r\n        this.greenAlert = null;\r\n        this.yellowAlert = null;\r\n        this.redAlert = null;\r\n\r\n        this.vibrateTime = 30000;\r\n    }\r\n\r\n    onStartTimer() {\r\n        this.noSleepEnable();\r\n\r\n        this.setState({\r\n            time: this.state.time,\r\n            start: Date.now() - this.state.time,\r\n            isRunning: true,\r\n            startTime: new Date(),\r\n        })\r\n\r\n        this.timerTick = setInterval(() => this.setState({\r\n            time: Date.now() - this.state.start\r\n        }), 1000);\r\n\r\n        this.greenAlert = setTimeout(() => {\r\n            this.vibrate(2000);\r\n            this.setColor(\"green\");\r\n        }, this.props.greenTime);\r\n        this.yellowAlert = setTimeout(() => {\r\n            this.vibrate(2000);\r\n            this.setColor(\"yellow\");\r\n        }, this.props.yellowTime);\r\n        this.redAlert = setTimeout(() => {\r\n            this.vibrate(2000);\r\n            this.alertLoop();\r\n            this.setColor(\"red\");\r\n        }, this.props.redTime);\r\n    }\r\n\r\n    alertLoop() {\r\n        this.intervalVibrate = setInterval(() => this.vibrate(2000), this.vibrateTime);\r\n    }\r\n\r\n    onStopTimer() {\r\n        this.setState({ isRunning: false, endTime: Date.now(), greenTime: this.props.greenTime, redTime: this.props.redTime, });\r\n        clearInterval(this.timerTick);\r\n        clearInterval(this.intervalVibrate);\r\n        clearTimeout(this.greenAlert);\r\n        clearTimeout(this.yellowAlert);\r\n        clearTimeout(this.redAlert);\r\n        this.noSleepDisable();\r\n    }\r\n\r\n    onResetTimer() {\r\n        this.setState({ time: 0, greenTime: null, redTime: null, })\r\n        this.setColor(null);\r\n    }\r\n\r\n    vibrate(duration) {\r\n        if (navigator.vibrate) {\r\n            navigator.vibrate(duration);\r\n        } else {\r\n            console.log(`vibrating for ${duration}ms`);\r\n        }\r\n    }\r\n\r\n    setColor(color) {\r\n        this.setState({\r\n            colorBox: color\r\n        })\r\n    }\r\n\r\n    noSleepEnable() {\r\n        if (nosleep) nosleep.disable();\r\n        nosleep = new NoSleep();\r\n        nosleep.enable();\r\n    }\r\n\r\n    noSleepDisable() {\r\n        nosleep.disable();\r\n    }\r\n\r\n    render() {\r\n        // format \"mm m ss s\" = \"09 m 59 s\"\r\n        const millisecFormat = 'mm m ss s';\r\n        const startTimeEndTimeFormat = timeFormat('%H : %M');\r\n\r\n        let style = {\r\n            height: '250px',\r\n            backgroundColor: this.state.colorBox,\r\n            display: 'flex'\r\n        };\r\n\r\n        let timerStyle = {\r\n            flex: '0 0 auto',\r\n            fontSize: '4.5em'\r\n        }\r\n\r\n        let buttonStyle = {\r\n            height: '110px',\r\n            width: '100%',\r\n            bottom: '30px',\r\n            position: 'absolute'\r\n        }\r\n\r\n        if (this.state.colorBox) {\r\n            style.backgroundColor = this.state.colorBox;\r\n        }\r\n\r\n        let start = (this.state.time === 0) ?\r\n            <Button style={buttonStyle} onClick={this.onStartTimer}>start</Button>\r\n            : null;\r\n\r\n        let stop = (this.state.isRunning) ?\r\n            <Button style={buttonStyle} onClick={this.onStopTimer}>stop</Button>\r\n            : null;\r\n\r\n        let reset = (this.state.time !== 0 && !this.state.isRunning) ?\r\n            <Button style={buttonStyle} onClick={this.onResetTimer}>reset</Button>\r\n            : null;\r\n\r\n        let startTimeEndTime = (this.state.time !== 0 && !this.state.isRunning) ?\r\n            <div>\r\n                <div>\r\n                    <span>Start Time: {startTimeEndTimeFormat(this.state.startTime)}</span>\r\n                </div>\r\n                <div>\r\n                    <span>End Time: {startTimeEndTimeFormat(this.state.endTime)}</span>\r\n                </div>\r\n            </div>\r\n            : null;\r\n\r\n        // use state to store time to prevent props.greenTime from modifying the previous time report\r\n        let greenTime = this.state.greenTime || this.props.greenTime;\r\n\r\n        let underTime = (this.state.time !== 0 && !this.state.isRunning && this.state.time < greenTime) ?\r\n            <span>UnderTime: {millisec(greenTime - this.state.time).format(millisecFormat)}</span>\r\n            : null;\r\n\r\n        let redTime = this.state.redTime || this.props.redTime;\r\n\r\n        let overTime = (this.state.time !== 0 && !this.state.isRunning && this.state.time > redTime) ?\r\n            <span>OverTime: {millisec(this.state.time - redTime).format(millisecFormat)}</span>\r\n            : null;\r\n\r\n        return (\r\n            <div className=\"timer-text\">\r\n                <div style={style} id=\"bigBox\"></div>\r\n                <h3 style={timerStyle}> {millisec(this.state.time).format(millisecFormat)} </h3>\r\n                {start}\r\n                {startTimeEndTime}\r\n                {overTime || underTime}\r\n                {stop}\r\n                {reset}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToastmasterTimer","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Form, Col, InputGroup, FormControl } from 'react-bootstrap';\r\nimport 'react-datetime/css/react-datetime.css';\r\nimport TimePicker from 'rc-time-picker';\r\nimport 'rc-time-picker/assets/index.css';\r\nimport moment from 'moment';\r\nimport { TimeConfig } from './settingPage.js';\r\nimport './App.css';\r\n\r\n\r\nclass TimerSetting extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.timeName = \"name\";\r\n        this.timeGreenId = \"timeGreen\";\r\n        this.timeYellowId = \"timeYellow\";\r\n        this.timeRedId = \"timeRed\";\r\n        this.timeVibrateId = \"timeVibrate\";\r\n\r\n        this.state = {\r\n            nameText: this.props.timerConfiguration.name,\r\n            canEditName: true,\r\n        }\r\n\r\n        this.onRunClicked = this.onRunClicked.bind(this);\r\n        this.onDeleteClicked = this.onDeleteClicked.bind(this);\r\n        this.onTimePickerChanged = this.onTimePickerChanged.bind(this);\r\n        this.onNameEditClicked = this.onNameEditClicked.bind(this);\r\n        this.onNameSaveClicked = this.onNameSaveClicked.bind(this);\r\n        this.onNameChanged = this.onNameChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.onInitialRun) {\r\n            const { name, green, yellow, red, vibrate } = this.props.timerConfiguration;\r\n            this.props.onInitialRun({ name, green, yellow, red, vibrate });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.timerConfiguration.name !== this.props.timerConfiguration.name) {\r\n            this.setState({\r\n                nameText: this.props.timerConfiguration.name,\r\n            })\r\n        }\r\n    }\r\n\r\n    onRunClicked() {\r\n        this.props.handleSelect(this.props.id);\r\n    }\r\n\r\n    onDeleteClicked() {\r\n        this.props.handleDelete(this.props.id);\r\n    }\r\n\r\n    convertTimeToMs(e) {\r\n        let time = e.split(\":\");\r\n        try {\r\n            if (e) {\r\n                return ((parseInt(time[0]) * 60) + parseInt(time[1])) * 1000\r\n            }\r\n            else {\r\n                return this.convertTimeToMs(moment(\"2017-11-27T00:00:00\"));\r\n            }\r\n        } catch (error) {\r\n            return null\r\n        }\r\n    }\r\n\r\n    onTimePickerChanged(timePickerElement, timePickerId) {\r\n        let newTime = this.convertTimeToMs(timePickerElement.value);\r\n        let newTimeConfig = new TimeConfig(\r\n            this.state.nameText,\r\n            timePickerId === this.timeGreenId ? newTime : this.props.timerConfiguration.green,\r\n            timePickerId === this.timeYellowId ? newTime : this.props.timerConfiguration.yellow,\r\n            timePickerId === this.timeRedId ? newTime : this.props.timerConfiguration.red,\r\n            timePickerId === this.timeVibrateId ? newTime : this.props.timerConfiguration.vibrate,\r\n        )\r\n\r\n        this.props.onTimerConfigurationChanged(this.props.id, newTimeConfig);\r\n    }\r\n\r\n    msToMinutesAndSeconds(ms) {\r\n        let minutes = Math.floor(ms / 60000);\r\n        let seconds = ((ms % 60000) / 1000).toFixed(0);\r\n        return moment(\"2017-11-27T00:\" + (minutes < 10 ? '0' : '') + minutes + \":\" + (seconds < 10 ? '0' : '') + seconds);\r\n    }\r\n\r\n    onNameEditClicked() {\r\n        this.setState({\r\n            canEditName: false\r\n        })\r\n        const input = document.getElementById(`nameTextBox${this.props.id}`);\r\n        input.focus();\r\n        input.select();\r\n    }\r\n\r\n    onNameSaveClicked(nameTextBox) {\r\n        let newTimeName = new TimeConfig(\r\n            nameTextBox.value,\r\n            this.props.timerConfiguration.green,\r\n            this.props.timerConfiguration.yellow,\r\n            this.props.timerConfiguration.red,\r\n            this.props.timerConfiguration.vibrate,\r\n        )\r\n        this.props.onTimerConfigurationChanged(this.props.id, newTimeName);\r\n        this.setState({\r\n            canEditName: true\r\n        })\r\n    }\r\n\r\n    onNameChanged(e) {\r\n        this.setState({\r\n            nameText: e.target.value,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let timerConfiguration = this.props.timerConfiguration;\r\n        let timerSecondStep = 15;\r\n\r\n        return (\r\n            <div>\r\n                <Form id={`form${this.props.id}`}>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} className=\"timer-name-group\">\r\n                            <InputGroup size=\"sm\" className=\"mb-3\">\r\n                                <FormControl\r\n                                    id={`nameTextBox${this.props.id}`}\r\n                                    value={this.state.nameText}\r\n                                    aria-label=\"Timer name\"\r\n                                    aria-describedby=\"basic-addon2\"\r\n                                    type=\"text\"\r\n                                    readOnly={this.state.canEditName}\r\n                                    className={`timer-name${this.props.id}`}\r\n                                    onChange={(e) => this.onNameChanged(e)}\r\n                                />\r\n                                <InputGroup.Append>\r\n                                    {\r\n                                        this.state.canEditName ? (\r\n                                            <Button onClick={this.onNameEditClicked} variant=\"outline-secondary\">Edit</Button>\r\n                                        ) : (\r\n                                                <Button onClick={(e) => this.onNameSaveClicked(document.querySelector(`.timer-name${this.props.id}`))} variant=\"outline-secondary\">Save</Button>\r\n                                            )\r\n                                    }\r\n\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </Form.Group>\r\n                        <Col></Col>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"formGreen\">\r\n                            <Form.Label>Green</Form.Label>\r\n                            <TimePicker id={this.timeGreenId}\r\n                                onClose={(e) => this.onTimePickerChanged(document.querySelector(\".rc-time-picker-panel-input\"), this.timeGreenId)}\r\n                                showTime={{ format: 'mm:ss' }} showHour={false} format=\"mm:ss\" secondStep={timerSecondStep} value={this.msToMinutesAndSeconds(timerConfiguration.green) || moment(\"2017-11-27T00:05:00\")} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"formYellow\">\r\n                            <Form.Label>Yellow</Form.Label>\r\n                            <TimePicker id={this.timeYellowId}\r\n                                onClose={(e) => this.onTimePickerChanged(document.querySelector(\".rc-time-picker-panel-input\"), this.timeYellowId)}\r\n                                showTime={{ format: 'mm:ss' }} showHour={false} format=\"mm:ss\" secondStep={timerSecondStep} value={this.msToMinutesAndSeconds(timerConfiguration.yellow) || moment(\"2017-11-27T00:06:00\")} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"formRed\">\r\n                            <Form.Label>Red</Form.Label>\r\n                            <TimePicker id={this.timeRedId}\r\n                                onClose={(e) => this.onTimePickerChanged(document.querySelector(\".rc-time-picker-panel-input\"), this.timeRedId)}\r\n                                showTime={{ format: 'mm:ss' }} showHour={false} format=\"mm:ss\" secondStep={timerSecondStep} value={this.msToMinutesAndSeconds(timerConfiguration.red) || moment(\"2017-11-27T00:07:00\")} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"formVibrateDelay\" hidden>\r\n                            <Form.Label>Late Interval</Form.Label>\r\n                            <TimePicker id={this.timeVibrateId}\r\n                                onClose={(e) => this.onTimePickerChanged(document.querySelector(\".rc-time-picker-panel-input\"), this.timeVibrateId)}\r\n                                showTime={{ format: 'ss' }} showHour={false} showMinute={false} format=\"ss\" secondStep={5} value={this.msToMinutesAndSeconds(timerConfiguration.vibrate) || moment(\"2017-11-27T00:00:30\")} />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <div className=\"form-button-container\">\r\n                        <Button variant=\"primary\" onClick={this.onDeleteClicked}>\r\n                            Delete\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={this.onRunClicked}>\r\n                            Run\r\n                        </Button>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimerSetting","import React from 'react';\r\nimport TimerSetting from './timerSetting';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ReactFileReader from 'react-file-reader';\r\nimport './App.css';\r\n\r\nclass SettingPage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            timerPanels: [],\r\n        }\r\n        this.onTimerRunClicked = this.onTimerRunClicked.bind(this)\r\n        this.onTimerPanelDelete = this.onTimerPanelDelete.bind(this)\r\n        this.onTimerConfigurationChanged = this.onTimerConfigurationChanged.bind(this)\r\n        this.onAddNewTimerPanelClicked = this.onAddNewTimerPanelClicked.bind(this)\r\n        this.onTimerConfigSave = this.onTimerConfigSave.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (localStorage.getItem('timerSetting')) {\r\n            let panelsState = JSON.parse(localStorage.getItem('timerSetting'));\r\n            this.setState({\r\n                timerPanels: panelsState,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                timerPanels: [new TimeConfig(\"default\" + this.state.timerPanels.length)],\r\n            })\r\n        }\r\n    }\r\n\r\n    onAddNewTimerPanelClicked(event) {\r\n        this.setState({\r\n            timerPanels: this.state.timerPanels.concat([new TimeConfig(\"default\" + this.state.timerPanels.length)]),\r\n        });\r\n    }\r\n\r\n    onTimerConfigurationChanged(index, newTimerConfiguration) {\r\n        this.setState(state => {\r\n            let [...newTimerPanels] = state.timerPanels;\r\n            newTimerPanels[index] = newTimerConfiguration;\r\n            return {\r\n                timerPanels: newTimerPanels\r\n            };\r\n        })\r\n    }\r\n\r\n    onTimerRunClicked(index) {\r\n        const { name, green, yellow, red, vibrate } = this.state.timerPanels[index];\r\n        this.props.onRunClick({ name, green, yellow, red, vibrate });\r\n    }\r\n\r\n    onTimerPanelDelete(index) {\r\n        let timerState = this.state.timerPanels.filter((element, i) => i !== index);\r\n        this.setState({\r\n            timerPanels: timerState,\r\n        })\r\n    }\r\n\r\n    onTimerConfigSave() {\r\n        localStorage.setItem('timerSetting', JSON.stringify(this.state.timerPanels));\r\n    }\r\n\r\n    exportToJsonFile() {\r\n        let dataStr = localStorage.getItem('timerSetting');\r\n        let dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`;\r\n\r\n        let exportFileDefaultName = 'timer_setting.json';\r\n\r\n        let linkElement = document.createElement('a');\r\n        linkElement.setAttribute('href', dataUri);\r\n        linkElement.setAttribute('download', exportFileDefaultName);\r\n        linkElement.click();\r\n    }\r\n\r\n    importToJsonFile(files) {\r\n        let reader = new FileReader();\r\n        reader.readAsText(files[0]);\r\n        reader.onload = e => {\r\n            let json = JSON.parse(e.target.result);\r\n            this.setState({\r\n                timerPanels: json,\r\n            })\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"form-button-container\">\r\n                    <Button onClick={this.onTimerConfigSave}>Save</Button>\r\n                    <Button onClick={this.exportToJsonFile} >Export</Button>\r\n                    <ReactFileReader handleFiles={this.importToJsonFile} fileTypes={[\".json\"]}>\r\n                        <Button className='btn'>Import</Button>\r\n                    </ReactFileReader>\r\n                </div>\r\n                <div className='panel-wrapper'>\r\n                    {\r\n                        this.state.timerPanels.map((timerConfig, index) => (\r\n                            <TimerSetting {...this.props}\r\n                                timerConfiguration={timerConfig}\r\n                                id={index}\r\n                                key={index}\r\n                                onTimerConfigurationChanged={this.onTimerConfigurationChanged}\r\n                                handleSelect={this.onTimerRunClicked}\r\n                                handleDelete={this.onTimerPanelDelete}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div className=\"form-button-container\">\r\n                    <Button onClick={this.onAddNewTimerPanelClicked}>Add new</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TimeConfig {\r\n    constructor(name, green, yellow, red, vibrate) {\r\n        this.name = name || \"default\";\r\n        this.green = green || 300000;\r\n        this.yellow = yellow || 360000;\r\n        this.red = red || 420000;\r\n        this.vibrate = vibrate || 30000;\r\n    }\r\n}\r\n\r\nexport { SettingPage, TimeConfig }","import React from 'react';\r\nimport { Tabs, Tab } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ToastmasterTimer from './toastmasterTimer.js';\r\nimport { SettingPage } from './settingPage.js';\r\nimport './App.css';\r\n\r\nexport class App extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      activeTab: \"setting\",\r\n      green: null,\r\n      yellow: null,\r\n      red: null,\r\n      vibrate: null,\r\n    };\r\n\r\n    // Bind the handleSelect function here (instead of in the render function)\r\n    this.handleTimerSelect = this.handleTimerSelect.bind(this);\r\n  }\r\n\r\n  handleTimerSelect(timerConfig) {\r\n    this.setState({\r\n      green: timerConfig.green,\r\n      yellow: timerConfig.yellow,\r\n      red: timerConfig.red,\r\n      vibrate: timerConfig.vibrate,\r\n      activeTab: \"timer\",\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Tabs\r\n          activeKey={this.state.activeTab}\r\n          defaultActiveKey=\"setting\"\r\n          onSelect={(eventKey, event) => { this.setState({ activeTab: eventKey }) }}\r\n          id=\"uncontrolled-tab-example\">\r\n          <Tab eventKey=\"setting\" title=\"Setting\">\r\n            <SettingPage\r\n              onRunClick={this.handleTimerSelect}\r\n            />\r\n          </Tab>\r\n          <Tab eventKey=\"timer\" title=\"Timer\">\r\n            <ToastmasterTimer greenTime={this.state.green} yellowTime={this.state.yellow} redTime={this.state.red} vibrateTime={this.state.vibrate} />\r\n          </Tab>\r\n        </Tabs>\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
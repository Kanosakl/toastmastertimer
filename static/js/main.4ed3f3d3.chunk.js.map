{"version":3,"sources":["timertest.js","timerSetting.js","settingPage.js","App.js","serviceWorker.js","index.js"],"names":["TimerTest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","start","isRunning","colorBox","startTime","endTime","greenTime","redTime","startTimer","bind","assertThisInitialized","stopTimer","resetTimer","greenAlert","yellowAlert","redAlert","_this2","setState","Date","now","timerTick","setInterval","setTimeout","vibrate","setColor","yellowTime","alertLoop","_this3","intervalVibrate","clearInterval","clearTimeout","duration","navigator","console","log","concat","color","startTimeEndTimeFormat","timeFormat","style","height","backgroundColor","display","buttonStyle","width","bottom","position","react_default","a","createElement","onClick","stop","reset","startTimeEndTime","underTime","millisec","format","overTime","className","id","flex","fontSize","React","Component","TimerSetting","timeName","timeGreenId","timeYellowId","timeRedId","timeVibrateId","canEditName","handleSelect","handleDelete","handleOnTimePickerChange","handleNameEdit","onInitialRun","_this$props$timerConf","timerConfiguration","name","green","yellow","red","e","minutes","seconds","convertTimeToMs","moment","error","timePickerId","newTime","newTimeConfig","TimeConfig","target","value","onTimerConfigurationChanged","millis","Math","floor","toFixed","Form","Row","Group","as","Col","InputGroup","size","FormControl","aria-label","aria-describedby","type","readOnly","onChange","Append","Button","variant","controlId","Label","es","showTime","showHour","secondStep","millisToMinutesAndSeconds","hidden","showMinute","SettingPage","importToJsonFile","files","reader","FileReader","readAsText","onload","json","JSON","parse","result","timerPanels","handleTimerConfigurationChanged","handleClick","handleTimerConfigSave","localStorage","getItem","panelsState","length","event","index","newTimerConfiguration","newTimerPanels","toArray","slice","_this$state$timerPane","onRunClick","timerState","filter","element","i","setItem","stringify","dataStr","dataUri","encodeURIComponent","linkElement","document","setAttribute","click","exportToJsonFile","react_file_reader_default","handleFiles","fileTypes","map","timerConfig","timerSetting","assign","key","App","_React$Component","activeTab","handleTimerSelect","onUnload","inherits","createClass","returnValue","window","addEventListener","removeEventListener","Tabs","activeKey","defaultActiveKey","onSelect","eventKey","Tab","title","settingPage_SettingPage","timertest","vibrateTime","Boolean","location","hostname","match","ReactDOM","render","App_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ed3f3d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n// import prettyMilliseconds from 'pretty-ms';\r\nimport millisec from 'millisec';\r\nimport { timeFormat } from \"d3-time-format\";\r\n// import { tsImportEqualsDeclaration } from '@babel/types';\r\n\r\nclass TimerTest extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            time: 0, //millisec format\r\n            start: 0,\r\n            isRunning: false,\r\n            colorBox: null,\r\n            startTime: null,\r\n            endTime: null,\r\n            greenTime: null,\r\n            redTime: null,\r\n        }\r\n        this.startTimer = this.startTimer.bind(this)\r\n        this.stopTimer = this.stopTimer.bind(this)\r\n        this.resetTimer = this.resetTimer.bind(this)\r\n\r\n        this.greenAlert = null;\r\n        this.yellowAlert = null;\r\n        this.redAlert = null;\r\n    }\r\n\r\n    startTimer() {\r\n        this.setState({\r\n            time: this.state.time,\r\n            start: Date.now() - this.state.time,\r\n            isRunning: true,\r\n            startTime: new Date(),\r\n        })\r\n        this.timerTick = setInterval(() => this.setState({\r\n            time: Date.now() - this.state.start\r\n        }), 1000);\r\n        this.greenAlert = setTimeout(() => {\r\n            this.vibrate(2000);\r\n            this.setColor(\"green\");\r\n        }, this.props.greenTime);\r\n        this.yellowAlert = setTimeout(() => {\r\n            this.vibrate(2000);\r\n            this.setColor(\"yellow\");\r\n        }, this.props.yellowTime);\r\n        this.redAlert = setTimeout(() => {\r\n            this.vibrate(2000);\r\n            this.alertLoop();\r\n            this.setColor(\"red\");\r\n        }, this.props.redTime);\r\n\r\n    }\r\n\r\n    alertLoop() {\r\n        let vibrateTime = 30000;\r\n        this.intervalVibrate = setInterval(() => this.vibrate(2000), vibrateTime);\r\n    }\r\n\r\n    stopTimer() {\r\n        this.setState({ isRunning: false, endTime: Date.now(), greenTime: this.props.greenTime, redTime: this.props.redTime });\r\n        clearInterval(this.timerTick);\r\n        clearInterval(this.intervalVibrate);\r\n        clearTimeout(this.greenAlert);\r\n        clearTimeout(this.yellowAlert);\r\n        clearTimeout(this.redAlert);\r\n\r\n    }\r\n\r\n    resetTimer() {\r\n        this.setState({ time: 0, greenTime: null, redTime: null, })\r\n        this.setColor(null);\r\n    }\r\n\r\n    vibrate(duration) {\r\n        if (navigator.vibrate) {\r\n            navigator.vibrate(duration);\r\n        } else {\r\n            console.log(`vibrating for ${duration}ms`);\r\n        }\r\n    }\r\n\r\n    setColor(color) {\r\n        this.setState({\r\n            colorBox: color\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        var millisecFormat = 'mm m ss s';\r\n        var startTimeEndTimeFormat = timeFormat('%H : %M');\r\n\r\n        let style = {\r\n            height: '250px',\r\n            backgroundColor: this.state.colorBox,\r\n            display: 'flex'\r\n        };\r\n\r\n        let timerStyle = {\r\n            flex: '0 0 auto',\r\n            fontSize: '4.5em'\r\n        }\r\n\r\n        let buttonStyle = {\r\n            height: '110px',\r\n            width: '100%',\r\n            bottom: '30px',\r\n            position: 'absolute'\r\n        }\r\n\r\n        if (this.state.colorBox) {\r\n            style.backgroundColor = this.state.colorBox;\r\n        }\r\n\r\n        let start = (this.state.time === 0) ?\r\n            <button style={buttonStyle} onClick={this.startTimer}>start</button> :\r\n            null\r\n        let stop = (this.state.isRunning) ?\r\n            <button style={buttonStyle} onClick={this.stopTimer}>stop</button> :\r\n            null\r\n        let reset = (this.state.time !== 0 && !this.state.isRunning) ?\r\n            <button style={buttonStyle} onClick={this.resetTimer}>reset</button> :\r\n            null\r\n        let startTimeEndTime = (this.state.time !== 0 && !this.state.isRunning) ?\r\n            <div>\r\n                <div>\r\n                    <span>Start Time: {startTimeEndTimeFormat(this.state.startTime)}</span>\r\n                </div>\r\n                <div>\r\n                    <span>End Time: {startTimeEndTimeFormat(this.state.endTime)}</span>\r\n                </div>\r\n            </div>\r\n            : null\r\n\r\n        let greenTime = this.state.greenTime || this.props.greenTime\r\n\r\n        let underTime = (this.state.time !== 0 && !this.state.isRunning && this.state.time < greenTime) ?\r\n            <span>UnderTime: {millisec(greenTime - this.state.time).format(millisecFormat)}</span> : null\r\n\r\n        let redTime = this.state.redTime || this.props.redTime;\r\n\r\n        let overTime = (this.state.time !== 0 && !this.state.isRunning && this.state.time > redTime) ?\r\n            <span>OverTime: {millisec(this.state.time - redTime).format(millisecFormat)}</span> : null\r\n\r\n        return (\r\n            <div className=\"timer-text\">\r\n                <div style={style} id=\"bigBox\"></div>\r\n                <h3 style={timerStyle}> {millisec(this.state.time).format(millisecFormat)} </h3>\r\n                {start}\r\n                {startTimeEndTime}\r\n                {overTime || underTime}\r\n                {stop}\r\n                {reset}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimerTest","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Form, Col, InputGroup, FormControl } from 'react-bootstrap';\r\nimport 'react-datetime/css/react-datetime.css';\r\nimport TimePicker from 'rc-time-picker';\r\nimport 'rc-time-picker/assets/index.css';\r\nimport moment from 'moment';\r\nimport { TimeConfig } from './settingPage.js';\r\nimport './App.css';\r\n\r\n\r\nclass TimerSetting extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.timeName = \"name\";\r\n        this.timeGreenId = \"timeGreen\";\r\n        this.timeYellowId = \"timeYellow\";\r\n        this.timeRedId = \"timeRed\";\r\n        this.timeVibrateId = \"timeVibrate\";\r\n        this.state = {\r\n            canEditName: true,\r\n        }\r\n        // this.state = {\r\n        //     green: this.convertTimeToMs(moment(\"2079-11-27T00:05:00\")),\r\n        //     yellow: this.convertTimeToMs(moment(\"2079-11-27T00:06:00\")),\r\n        //     red: this.convertTimeToMs(moment(\"2079-11-27T00:07:00\")),\r\n        //     vibrateDelay: this.convertTimeToMs(moment(\"2079-11-27T00:00:30\"))\r\n        // }\r\n        // this.startTimer = this.startTimer.bind(this)\r\n        this.handleSelect = this.handleSelect.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n        this.handleOnTimePickerChange = this.handleOnTimePickerChange.bind(this);\r\n        this.handleNameEdit = this.handleNameEdit.bind(this);\r\n        // this.onTimeChange = this.onTimeChange.bind(this);        \r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        if (this.props.onInitialRun) {\r\n            const { name, green, yellow, red, vibrate } = this.props.timerConfiguration;\r\n            this.props.onInitialRun({ name, green, yellow, red, vibrate });\r\n        }\r\n    }\r\n\r\n    handleSelect() {\r\n        this.props.handleSelect(this.props.id);\r\n    }\r\n\r\n    handleDelete() {\r\n        this.props.handleDelete(this.props.id);\r\n    }\r\n\r\n    convertTimeToMs(e) {\r\n        try {\r\n        if (e) {\r\n            return ((e.minutes() * 60) + e.seconds()) * 1000\r\n        }\r\n        else {\r\n            return this.convertTimeToMs(moment(\"2017-11-27T00:00:00\"));\r\n        }\r\n        } catch (error) {\r\n            return null\r\n    }\r\n    }\r\n\r\n    handleOnTimePickerChange(e, timePickerId) {\r\n        let newTime = this.convertTimeToMs(e);\r\n        let newTimeConfig = new TimeConfig(\r\n            timePickerId === this.timeName ? e.target.value : this.props.timerConfiguration.name,\r\n            timePickerId === this.timeGreenId ? newTime : this.props.timerConfiguration.green,\r\n            timePickerId === this.timeYellowId ? newTime : this.props.timerConfiguration.yellow,\r\n            timePickerId === this.timeRedId ? newTime : this.props.timerConfiguration.red,\r\n            timePickerId === this.timeVibrateId ? newTime : this.props.timerConfiguration.vibrate\r\n        )       \r\n\r\n        this.props.onTimerConfigurationChanged(this.props.id, newTimeConfig);\r\n    }\r\n\r\n    millisToMinutesAndSeconds(millis) {\r\n        var minutes = Math.floor(millis / 60000);\r\n        var seconds = ((millis % 60000) / 1000).toFixed(0);\r\n        return moment(\"2017-11-27T00:\" + (minutes < 10 ? '0' : '') + minutes + \":\" + (seconds < 10 ? '0' : '') + seconds);\r\n    }\r\n\r\n    handleNameEdit() {\r\n        debugger;\r\n        this.setState({\r\n            canEditName: this.state.canEditName === true ? false : true\r\n        })\r\n      }\r\n\r\n    render() {\r\n        let timerConfiguration = this.props.timerConfiguration;\r\n        let timerSecondStep = 15;\r\n\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} className=\"timer-name-group\">\r\n                            <InputGroup size=\"sm\" className=\"mb-3\">\r\n                                <FormControl\r\n                                    id={this.timeName}\r\n                                    value={timerConfiguration.name}\r\n                                    aria-label=\"Timer name\"\r\n                                    aria-describedby=\"basic-addon2\"\r\n                                    type=\"text\"\r\n                                    readOnly={this.state.canEditName}\r\n                                    onChange={(e) => this.handleOnTimePickerChange(e, this.timeName)}\r\n                                    className=\"timer-name\"\r\n                                />\r\n                                <InputGroup.Append>\r\n                                    <Button onClick={this.handleNameEdit} variant=\"outline-secondary\">{this.state.canEditName ? \"Edit\" : \"Save\"}</Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </Form.Group>\r\n                        <Col></Col>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"formGreen\">\r\n                            <Form.Label>Green</Form.Label>\r\n                            <TimePicker id={this.timeGreenId}\r\n                                // value={this.state.green} \r\n                                // onChange={(e) => { this.setState({ green: this.convertTimeToMs(e) }) }}\r\n                                onChange={(e) => this.handleOnTimePickerChange(e, this.timeGreenId)}\r\n\r\n                                showTime={{ format: 'mm:ss' }} showHour={false} format=\"mm:ss\" secondStep={timerSecondStep} value={this.millisToMinutesAndSeconds(timerConfiguration.green) || moment(\"2017-11-27T00:05:00\")} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"formYellow\">\r\n                            <Form.Label>Yellow</Form.Label>\r\n                            <TimePicker id={this.timeYellowId}\r\n                                // value={this.state.yellow} \r\n                                // onChange={(e) => { this.setState({ yellow: this.convertTimeToMs(e) }) }}\r\n                                onChange={(e) => this.handleOnTimePickerChange(e, this.timeYellowId)}\r\n\r\n                                showTime={{ format: 'mm:ss' }} showHour={false} format=\"mm:ss\" secondStep={timerSecondStep} value={this.millisToMinutesAndSeconds(timerConfiguration.yellow) || moment(\"2017-11-27T00:06:00\")} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"formRed\">\r\n                            <Form.Label>Red</Form.Label>\r\n                            <TimePicker id={this.timeRedId}\r\n                                // value={this.state.red} \r\n                                // onChange={(e) => { this.setState({ red: this.convertTimeToMs(e) }) }}\r\n                                onChange={(e) => this.handleOnTimePickerChange(e, this.timeRedId)}\r\n\r\n                                showTime={{ format: 'mm:ss' }} showHour={false} format=\"mm:ss\" secondStep={timerSecondStep} value={this.millisToMinutesAndSeconds(timerConfiguration.red) || moment(\"2017-11-27T00:07:00\")} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"formVibrateDelay\" hidden>\r\n                            <Form.Label>Late Interval</Form.Label>\r\n                            <TimePicker id={this.timeVibrateId}\r\n                                // value={this.state.vibrateDelay} \r\n                                // onChange={(e) => { this.setState({ vibrateDelay: this.convertTimeToMs(e) }) }}\r\n                                onChange={(e) => this.handleOnTimePickerChange(e, this.timeVibrateId)}\r\n\r\n                                showTime={{ format: 'ss' }} showHour={false} showMinute={false} format=\"ss\" secondStep={5} value={this.millisToMinutesAndSeconds(timerConfiguration.vibrate) || moment(\"2017-11-27T00:00:30\")}\r\n                            // onOpen={this.openIntervalCss} \r\n                            // onClose={this.closeIntervalCss}\r\n                            />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <div className=\"form-button-container\">\r\n                        <Button variant=\"primary\" onClick={this.handleDelete}>\r\n                            Delete\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={this.handleSelect}>\r\n                            Run\r\n                        </Button>\r\n                    </div>\r\n                </Form>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimerSetting","import React from 'react';\r\nimport './App.css';\r\nimport TimerSetting from './timerSetting';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ReactFileReader from 'react-file-reader';\r\nimport './App.css';\r\n\r\nclass SettingPage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            timerPanels: [],\r\n        }\r\n        // this.startTimer = this.startTimer.bind(this)\r\n        this.handleSelect = this.handleSelect.bind(this)\r\n        this.handleDelete = this.handleDelete.bind(this)\r\n        this.handleTimerConfigurationChanged = this.handleTimerConfigurationChanged.bind(this)\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.handleTimerConfigSave = this.handleTimerConfigSave.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(localStorage.getItem('timerSetting')){\r\n            let panelsState = JSON.parse(localStorage.getItem('timerSetting'));\r\n            this.setState({\r\n                timerPanels: panelsState,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                timerPanels: [new TimeConfig(\"default\" + this.state.timerPanels.length)],\r\n            })\r\n        }\r\n    }\r\n\r\n    handleClick(event) {\r\n        this.setState({\r\n            timerPanels: this.state.timerPanels.concat([new TimeConfig(\"default\" + this.state.timerPanels.length)]),\r\n        });\r\n    }\r\n\r\n    handleTimerConfigurationChanged(index, newTimerConfiguration){\r\n        this.setState(state => {\r\n            let [...newTimerPanels] = state.timerPanels;\r\n            newTimerPanels[index] = newTimerConfiguration;\r\n            return {\r\n                timerPanels: newTimerPanels\r\n            };\r\n        })\r\n    }\r\n\r\n    handleSelect(index) {\r\n        const { name, green, yellow, red, vibrate } = this.state.timerPanels[index];\r\n        this.props.onRunClick({ name, green, yellow, red, vibrate });\r\n    }\r\n\r\n    handleDelete(index) {\r\n        let timerState = this.state.timerPanels.filter( (element,i) => i !== index);\r\n        this.setState({\r\n            timerPanels: timerState,\r\n        })\r\n    }\r\n\r\n    handleTimerConfigSave(){\r\n        localStorage.setItem('timerSetting', JSON.stringify(this.state.timerPanels));\r\n    }\r\n\r\n    exportToJsonFile() {\r\n        let dataStr = localStorage.getItem('timerSetting');\r\n        let dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);\r\n\r\n        let exportFileDefaultName = 'timer_setting.json';\r\n\r\n        let linkElement = document.createElement('a');\r\n        linkElement.setAttribute('href', dataUri);\r\n        linkElement.setAttribute('download', exportFileDefaultName);\r\n        linkElement.click();\r\n    }\r\n\r\n    importToJsonFile = files => {\r\n        let reader = new FileReader();\r\n        reader.readAsText(files[0]);\r\n        reader.onload = e => {\r\n            let json = JSON.parse(e.target.result);\r\n            this.setState({\r\n                timerPanels: json,\r\n            })\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"form-button-container\">\r\n                <Button onClick={this.handleTimerConfigSave}>Save</Button>\r\n                    <Button onClick={this.exportToJsonFile} >Export</Button>\r\n                    <ReactFileReader handleFiles={this.importToJsonFile} fileTypes={[\".json\"]}>\r\n                        <Button className='btn'>Import</Button>\r\n                    </ReactFileReader>\r\n                </div>\r\n                <div className='panel-wrapper'>\r\n                    {\r\n                        this.state.timerPanels.map((timerConfig, index) => (\r\n                            <TimerSetting {...this.props} timerConfiguration={timerConfig} id={index} key={index}\r\n                            onTimerConfigurationChanged={this.handleTimerConfigurationChanged}\r\n                            handleSelect={this.handleSelect} \r\n                            handleDelete={this.handleDelete}\r\n                            // onInitialRun={panelId === 0? this.props.onRunClick : null}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div className=\"form-button-container\">\r\n                <Button onClick={this.handleClick}>Add new</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass TimeConfig {\r\n    constructor(name, green, yellow, red, vibrate) {\r\n        this.name = name || \"default\";\r\n        this.green = green || 300000;\r\n        this.yellow = yellow || 360000;\r\n        this.red = red || 420000;\r\n        this.vibrate = vibrate || 30000;\r\n    }\r\n}\r\n\r\nexport { SettingPage, TimeConfig }","import React from 'react';\r\nimport './App.css';\r\nimport { Tabs, Tab } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport TimerTest from './timertest.js';\r\nimport { SettingPage } from './settingPage.js';\r\nimport './App.css';\r\n\r\n// alert(`Navigator vibrate function ${!!navigator.vibrate ? \"does\" : \"does not\"} exist`);\r\n\r\nexport class App extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      // Takes active tab from props if it is defined there\r\n      activeTab: \"setting\",\r\n      green: null,\r\n      yellow: null,\r\n      red: null,\r\n      vibrate: null,\r\n    };\r\n\r\n    // Bind the handleSelect function already here (not in the render function)\r\n    this.handleSelect = this.handleSelect.bind(this);\r\n    this.handleTimerSelect = this.handleTimerSelect.bind(this);\r\n    this.onUnload = this.onUnload.bind(this);\r\n  }\r\n  \r\n  onUnload(event) { // the method that will be used for both add and remove event\r\n    console.log(\"hellooww\")\r\n    event.returnValue = \"Hellooww\"\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"beforeunload\", this.onUnload)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"beforeunload\", this.onUnload)\r\n  }\r\n\r\n  handleSelect(time) {\r\n    this.setState({\r\n      // activeTab: \"timer\"\r\n    });\r\n\r\n  }\r\n\r\n  handleTimerSelect(timerConfig) {\r\n    this.setState({\r\n      green: timerConfig.green,\r\n      yellow: timerConfig.yellow,\r\n      red: timerConfig.red,\r\n      vibrate: timerConfig.vibrate,\r\n      activeTab: \"timer\",\r\n    });\r\n  }\r\n\r\n  render() {\r\n    //   var callback = function (key) {\r\n    return (\r\n      <div className=\"App\">\r\n        <Tabs activeKey={this.state.activeTab} defaultActiveKey=\"setting\" onSelect={(eventKey, event) => { this.setState({ activeTab: eventKey }) }}\r\n          // onSelect={this.handleSelect} \r\n          id=\"uncontrolled-tab-example\">\r\n          <Tab eventKey=\"setting\" title=\"Setting\">\r\n            <SettingPage\r\n              onRunClick={this.handleTimerSelect}\r\n            />\r\n          </Tab>\r\n          <Tab eventKey=\"timer\" title=\"Timer\">\r\n            <TimerTest greenTime={this.state.green} yellowTime={this.state.yellow} redTime={this.state.red} vibrateTime={this.state.vibrate} />\r\n          </Tab>\r\n        </Tabs>\r\n        {/* <ButtonToolbar>\r\n          <Button variant=\"primary\" >\r\n            Setting\r\n        </Button>\r\n        </ButtonToolbar>\r\n        <TimerTest />\r\n        <ButtonToolbar>\r\n          <Button variant=\"primary\" size=\"lg\" onClick={this.startCounting}>\r\n            Start\r\n        </Button>\r\n          <Button variant=\"secondary\" size=\"lg\">\r\n            Reset\r\n        </Button>\r\n        </ButtonToolbar> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n// function msConverter({ milliseconds = 0, seconds = 0, minutes = 0, hours = 0 }:\r\n//   { milliseconds?: number, seconds?: number, minutes?: number, hours?: number }) {\r\n//     return milliseconds + (seconds * 1000) + (minutes * 60000) + (hours * 36000) \r\n// }\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
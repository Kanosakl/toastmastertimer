{"version":3,"sources":["timertest.js","timerSetting.js","settingPage.js","App.js","serviceWorker.js","index.js"],"names":["TimerTest","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","start","isRunning","colorBox","startTime","endTime","startTimer","bind","assertThisInitialized","stopTimer","resetTimer","greenAlert","yellowAlert","redAlert","_this2","setState","Date","now","timerTick","setInterval","setTimeout","vibrate","setColor","greenTime","yellowTime","alertLoop","redTime","_this3","intervalVibrate","vibrateTime","clearInterval","clearTimeout","duration","navigator","color","startTimeEndTimeFormat","timeFormat","style","height","backgroundColor","display","buttonStyle","width","bottom","position","react_default","a","createElement","onClick","stop","reset","startTimeEndTime","underTime","millisec","format","overTime","class","id","flex","fontSize","React","Component","TimerSetting","green","convertTimeToMs","moment","yellow","red","vibrateDelay","handleSelect","onInitialRun","_this$state","_this$state2","onRunClick","e","minutes","seconds","Form","Row","Group","as","Col","controlId","Label","es","onChange","showTime","showHour","secondStep","defaultValue","showMinute","disabledMinutes","Button","variant","settingPage","timerPanels","event","nextId","length","concat","className","map","panelId","timerSetting","assign","key","handleClick","App","_React$Component","activeTab","handleTimerSelect","inherits","createClass","value","_ref","Tabs","activeKey","defaultActiveKey","onSelect","eventKey","Tab","title","src_settingPage","timertest","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9e204ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n// import prettyMilliseconds from 'pretty-ms';\r\nimport millisec from 'millisec';\r\nimport { timeFormat } from \"d3-time-format\";\r\n// import { tsImportEqualsDeclaration } from '@babel/types';\r\n\r\nclass TimerTest extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            time: 0, //millisec format\r\n            start: 0,\r\n            isRunning: false,\r\n            colorBox: null,\r\n            startTime: null,\r\n            endTime: null,\r\n        }\r\n        this.startTimer = this.startTimer.bind(this)\r\n        this.stopTimer = this.stopTimer.bind(this)\r\n        this.resetTimer = this.resetTimer.bind(this)\r\n\r\n        this.greenAlert = null;\r\n        this.yellowAlert = null;\r\n        this.redAlert = null;\r\n    }\r\n    startTimer() {\r\n        this.setState({\r\n            time: this.state.time,\r\n            start: Date.now() - this.state.time,\r\n            isRunning: true,\r\n            startTime: new Date(),\r\n        })\r\n        this.timerTick = setInterval(() => this.setState({\r\n            time: Date.now() - this.state.start\r\n        }), 1000);\r\n        this.greenAlert = setTimeout(() => {\r\n            this.vibrate(2000);\r\n            this.setColor(\"green\");\r\n        }, this.props.greenTime);\r\n        this.yellowAlert = setTimeout(() => {\r\n            this.vibrate(2000);\r\n            this.setColor(\"yellow\");\r\n        }, this.props.yellowTime);\r\n        this.redAlert = setTimeout(() => {\r\n            this.vibrate(2000);\r\n            this.alertLoop();\r\n            this.setColor(\"red\");\r\n        }, this.props.redTime);\r\n\r\n    }\r\n\r\n    alertLoop() {\r\n        this.intervalVibrate = setInterval(() => this.vibrate(1000), this.props.vibrateTime);\r\n    }\r\n\r\n    stopTimer() {\r\n        this.setState({ isRunning: false, endTime: Date.now(), });\r\n        clearInterval(this.timerTick);\r\n        clearInterval(this.intervalVibrate);\r\n        clearTimeout(this.greenAlert);\r\n        clearTimeout(this.yellowAlert);\r\n        clearTimeout(this.redAlert);\r\n\r\n    }\r\n\r\n    resetTimer() {\r\n        this.setState({ time: 0 })\r\n        this.setColor(null);\r\n    }\r\n\r\n    vibrate(duration) {\r\n        if (navigator.vibrate) {\r\n            navigator.vibrate(duration);\r\n        }\r\n    }\r\n\r\n    setColor(color) {\r\n        this.setState({\r\n            colorBox: color\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        var millisecFormat = 'mm m ss s';\r\n        var startTimeEndTimeFormat = timeFormat('%H : %M');\r\n\r\n        let style = {\r\n            height: '250px',\r\n            backgroundColor: this.state.colorBox,\r\n            display: 'flex'\r\n        };\r\n\r\n        let timerStyle = {\r\n            flex: '0 0 auto',\r\n            fontSize: '4.5em'\r\n        }\r\n\r\n        let buttonStyle = {\r\n            height: '110px',\r\n            width: '100%',\r\n            bottom: '30px',\r\n            position: 'absolute'\r\n        }\r\n\r\n        if (this.state.colorBox) {\r\n            style.backgroundColor = this.state.colorBox;\r\n        }\r\n\r\n        let start = (this.state.time === 0) ?\r\n            <button style={buttonStyle} onClick={this.startTimer}>start</button> :\r\n            null\r\n        let stop = (this.state.isRunning) ?\r\n            <button style={buttonStyle} onClick={this.stopTimer}>stop</button> :\r\n            null\r\n        let reset = (this.state.time !== 0 && !this.state.isRunning) ?\r\n            <button style={buttonStyle} onClick={this.resetTimer}>reset</button> :\r\n            null\r\n        let startTimeEndTime = (this.state.time !== 0 && !this.state.isRunning) ?\r\n            <div>\r\n                <div>\r\n                    <span>Start Time: {startTimeEndTimeFormat(this.state.startTime)}</span>\r\n                </div>\r\n                <div>\r\n                    <span>End Time: {startTimeEndTimeFormat(this.state.endTime)}</span>\r\n                </div>\r\n            </div>\r\n            : null\r\n\r\n        let underTime = (this.state.time !== 0 && !this.state.isRunning && this.state.time < this.props.greenTime) ?\r\n            <span>UnderTime: {millisec(this.props.greenTime - this.state.time).format(millisecFormat)}</span> : null\r\n\r\n        let overTime = (this.state.time !== 0 && !this.state.isRunning && this.state.time > this.props.redTime) ?\r\n            <span>OverTime: {millisec(this.state.time - this.props.redTime).format(millisecFormat)}</span> : null\r\n\r\n        return (\r\n            <div class=\"text1\">\r\n                <div style={style} id=\"bigBox\"></div>\r\n                <h3 style={timerStyle}> {millisec(this.state.time).format(millisecFormat)} </h3>\r\n                {start}\r\n                {startTimeEndTime}\r\n                {overTime || underTime}\r\n                {stop}\r\n                {reset}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimerTest","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Form, Col } from 'react-bootstrap';\r\nimport 'react-datetime/css/react-datetime.css';\r\nimport TimePicker from 'rc-time-picker';\r\nimport 'rc-time-picker/assets/index.css';\r\nimport moment from 'moment';\r\n\r\n\r\nclass TimerSetting extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            green: this.convertTimeToMs(moment(\"2079-11-27T00:05:00\")),\r\n            yellow: this.convertTimeToMs(moment(\"2079-11-27T00:06:00\")),\r\n            red: this.convertTimeToMs(moment(\"2079-11-27T00:07:00\")),\r\n            vibrateDelay: this.convertTimeToMs(moment(\"2079-11-27T00:00:30\"))\r\n        }\r\n        // this.startTimer = this.startTimer.bind(this)\r\n        this.handleSelect = this.handleSelect.bind(this);\r\n        // this.onTimeChange = this.onTimeChange.bind(this);        \r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        if (this.props.onInitialRun) {\r\n            const { green, yellow, red, vibrateDelay } = this.state;\r\n            this.props.onInitialRun({ green, yellow, red, vibrateDelay });\r\n        }\r\n    }\r\n\r\n    disabledHours() {\r\n        const allHours = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\r\n            16, 17, 18, 19, 20, 21, 22, 23]\r\n\r\n        return allHours;\r\n    };\r\n\r\n    disabledMinutes() {\r\n        const allMinutes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\r\n            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\r\n            37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59\r\n        ]\r\n\r\n        return allMinutes;\r\n    };\r\n\r\n    handleSelect() {\r\n        const { green, yellow, red, vibrateDelay } = this.state;\r\n        this.props.onRunClick({ green, yellow, red, vibrateDelay });\r\n    }\r\n\r\n    convertTimeToMs(e) {\r\n        if (e) {\r\n            return ((e.minutes() * 60) + e.seconds()) * 1000\r\n        }\r\n        else {\r\n            return this.convertTimeToMs(moment(\"2017-11-27T00:00:00\"));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"formGreen\">\r\n                            <Form.Label>Green</Form.Label>\r\n                            <TimePicker id=\"timeGreen\"\r\n                                // value={this.state.green} \r\n                                onChange={(e) => { this.setState({ green: this.convertTimeToMs(e) }) }}\r\n\r\n                                showTime={{ format: 'mm:ss' }} showHour={false} format=\"mm:ss\" secondStep={15} defaultValue={moment(\"2017-11-27T00:05:00\")} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"formYellow\">\r\n                            <Form.Label>Yellow</Form.Label>\r\n                            <TimePicker id=\"timeYellow\"\r\n                                // value={this.state.yellow} \r\n                                onChange={(e) => { this.setState({ yellow: this.convertTimeToMs(e) }) }}\r\n\r\n                                showTime={{ format: 'mm:ss' }} showHour={false} format=\"mm:ss\" secondStep={15} defaultValue={moment(\"2017-11-27T00:06:00\")} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"formRed\">\r\n                            <Form.Label>Red</Form.Label>\r\n                            <TimePicker id=\"timeRed\"\r\n                                // value={this.state.red} \r\n                                onChange={(e) => { this.setState({ red: this.convertTimeToMs(e) }) }}\r\n\r\n                                showTime={{ format: 'mm:ss' }} showHour={false} format=\"mm:ss\" secondStep={15} defaultValue={moment(\"2017-11-27T00:07:00\")} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"formVibrateDelay\">\r\n                            <Form.Label>Late Interval</Form.Label>\r\n                            <TimePicker id=\"timeVibrateDelay\"\r\n                                // value={this.state.vibrateDelay} \r\n                                onChange={(e) => { this.setState({ vibrateDelay: this.convertTimeToMs(e) }) }}\r\n                                showTime={{ format: 'ss' }} showHour={false} showMinute={false} format=\"ss\" secondStep={5} disabledMinutes={this.disabledMinutes} defaultValue={moment(\"2017-11-27T00:00:30\")}\r\n                            // onOpen={this.openIntervalCss} \r\n                            // onClose={this.closeIntervalCss}\r\n                            />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <div class=\"form-button-container\">\r\n                        <Button variant=\"primary\" >\r\n                            Delete\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={this.handleSelect}>\r\n                            Run\r\n                        </Button>\r\n                    </div>\r\n                </Form>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimerSetting","import React from 'react';\r\nimport './App.css';\r\nimport TimerSetting from './timerSetting';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass settingPage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            timerPanels: [0]\r\n        }\r\n        // this.startTimer = this.startTimer.bind(this)\r\n    }\r\n\r\n    handleClick(event) {\r\n        const nextId = this.state.timerPanels.length + 1\r\n        this.setState({\r\n            timerPanels: this.state.timerPanels.concat([nextId])\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='panel-wrapper'>\r\n                    {\r\n                        this.state.timerPanels.map((panelId) => (\r\n                            <TimerSetting {...this.props} key={panelId} id={panelId}\r\n                            // onInitialRun={panelId === 0? this.props.onRunClick : null}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n                <Button onClick={this.handleClick.bind(this)}>Add new</Button>\r\n                {/* <Button variant=\"primary\" id=\"save\">Save</Button> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default settingPage","import React from 'react';\r\nimport './App.css';\r\nimport { Tabs, Tab } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport TimerTest from './timertest.js';\r\nimport SettingPage from './settingPage.js';\r\n\r\n// alert(`Navigator vibrate function ${!!navigator.vibrate ? \"does\" : \"does not\"} exist`);\r\n\r\nexport class App extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      // Takes active tab from props if it is defined there\r\n      activeTab: \"setting\",\r\n      green: null,\r\n      yellow: null,\r\n      red: null,\r\n      vibrate: null,\r\n    };\r\n\r\n    // Bind the handleSelect function already here (not in the render function)\r\n    this.handleSelect = this.handleSelect.bind(this);\r\n    this.handleTimerSelect = this.handleTimerSelect.bind(this);\r\n  }\r\n\r\n  handleSelect(time) {\r\n    this.setState({\r\n      // activeTab: \"timer\"\r\n    });\r\n\r\n  }\r\n\r\n  handleTimerSelect({ green, yellow, red, vibrateDelay }) {\r\n    this.setState({\r\n      green: green,\r\n      yellow: yellow,\r\n      red: red,\r\n      vibrate: vibrateDelay,\r\n      activeTab: \"timer\"\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    //   var callback = function (key) {\r\n\r\n\r\n\r\n    return (\r\n\r\n      <div className=\"App\">\r\n        <Tabs activeKey={this.state.activeTab} defaultActiveKey=\"setting\" onSelect={(eventKey, event) => { this.setState({ activeTab: eventKey }) }}\r\n          // onSelect={this.handleSelect} \r\n          id=\"uncontrolled-tab-example\">\r\n          <Tab eventKey=\"setting\" title=\"Setting\">\r\n            <SettingPage\r\n              onRunClick={this.handleTimerSelect}\r\n            />\r\n          </Tab>\r\n          <Tab eventKey=\"timer\" title=\"Timer\">\r\n            <TimerTest greenTime={this.state.green} yellowTime={this.state.yellow} redTime={this.state.red} vibrateTime={this.state.vibrate} />\r\n          </Tab>\r\n        </Tabs>\r\n        {/* <ButtonToolbar>\r\n          <Button variant=\"primary\" >\r\n            Setting\r\n        </Button>\r\n        </ButtonToolbar>\r\n        <TimerTest />\r\n        <ButtonToolbar>\r\n          <Button variant=\"primary\" size=\"lg\" onClick={this.startCounting}>\r\n            Start\r\n        </Button>\r\n          <Button variant=\"secondary\" size=\"lg\">\r\n            Reset\r\n        </Button>\r\n        </ButtonToolbar> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n// function msConverter({ milliseconds = 0, seconds = 0, minutes = 0, hours = 0 }:\r\n//   { milliseconds?: number, seconds?: number, minutes?: number, hours?: number }) {\r\n//     return milliseconds + (seconds * 1000) + (minutes * 60000) + (hours * 36000) \r\n// }\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}